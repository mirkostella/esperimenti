{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  products: [{\n    id: 0,\n    name: \"gelato\",\n    basePrice: 2,\n    category: \"surgelati\",\n    selectedColor: \"green\",\n    variantsColor: [\"red\", \"blue\", \"green\"]\n  }, {\n    id: 1,\n    name: \"caffe\",\n    basePrice: 1,\n    category: \"polvere\",\n    selectedColor: \"red\",\n    variantsColor: [\"red\"]\n  }, {\n    id: 2,\n    name: \"patatine\",\n    basePrice: 3,\n    category: \"snak\",\n    selectedColor: \"blue\",\n    variants: [\"blue\", \"green\"]\n  }, {\n    id: 3,\n    name: \"carta\",\n    basePrice: 5,\n    category: \"consumo\",\n    selectedColor: \"blue\",\n    variants: [\"blue\"]\n  }],\n  cartProducts: [],\n  countID: 4\n};\nconst productsSlice = createSlice({\n  name: 'products',\n  initialState,\n  reducers: {\n    addProduct: (state, action) => {\n      state.products.push({\n        id: state.countID,\n        name: action.payload.name,\n        basePrice: action.payload.basePrice,\n        category: action.payload.category\n      });\n      state.countID += 1;\n    },\n    changeColor: (state, action) => {\n      const indexProduct = state.products.findIndex(product => product.id == action.payload.id);\n      state.products[indexProduct].selectedColor = action.payload.color;\n    }\n  }\n});\nexport const {\n  addProduct,\n  changeColor\n} = productsSlice.actions;\nexport const selectorProducts = state => state.products.products;\n// export const selectorProductsByID=(state,id)=>state.products.products.find(item.id===id);\n\nexport default productsSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","products","id","name","basePrice","category","selectedColor","variantsColor","variants","cartProducts","countID","productsSlice","reducers","addProduct","state","action","push","payload","changeColor","indexProduct","findIndex","product","color","actions","selectorProducts","reducer"],"sources":["C:/Users/Mirko Stella/Desktop/esperimenti/src/features/products/productsSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState={\r\n    products: [\r\n        {\r\n        id:0,name:\"gelato\",\r\n        basePrice: 2,\r\n        category:\"surgelati\",\r\n        selectedColor:\"green\",\r\n        variantsColor:[\"red\",\"blue\",\"green\"]\r\n        },\r\n        {\r\n        id:1,name:\"caffe\",\r\n        basePrice: 1,\r\n        category:\"polvere\",\r\n        selectedColor:\"red\",\r\n        variantsColor:[\"red\"]\r\n        },\r\n        {\r\n        id:2,name:\"patatine\",\r\n        basePrice: 3,\r\n        category:\"snak\",\r\n        selectedColor:\"blue\",\r\n        variants:[\"blue\",\"green\"]\r\n        },\r\n        {   \r\n        id:3,\r\n        name:\"carta\",\r\n        basePrice: 5,\r\n        category:\"consumo\",\r\n        selectedColor:\"blue\",\r\n        variants:[\"blue\"]\r\n        }\r\n    ],\r\n    cartProducts:[],\r\n    countID: 4\r\n};\r\n\r\nconst productsSlice=createSlice({\r\n    name: 'products',\r\n    initialState,\r\n    reducers: {\r\n        addProduct:(state,action)=>{\r\n            state.products.push({\r\n                id:state.countID,\r\n                name:action.payload.name,\r\n                basePrice:action.payload.basePrice,\r\n                category:action.payload.category\r\n            });\r\n            state.countID+=1;\r\n        },\r\n        changeColor:(state,action)=>{\r\n            const indexProduct=state.products.findIndex((product)=>product.id==action.payload.id);\r\n            state.products[indexProduct].selectedColor=action.payload.color;\r\n        }\r\n    }\r\n});\r\nexport const {addProduct,changeColor}=productsSlice.actions;\r\nexport const selectorProducts=(state)=>state.products.products;\r\n// export const selectorProductsByID=(state,id)=>state.products.products.find(item.id===id);\r\n\r\nexport default productsSlice.reducer;"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAE9C,MAAMC,YAAY,GAAC;EACfC,QAAQ,EAAE,CACN;IACAC,EAAE,EAAC,CAAC;IAACC,IAAI,EAAC,QAAQ;IAClBC,SAAS,EAAE,CAAC;IACZC,QAAQ,EAAC,WAAW;IACpBC,aAAa,EAAC,OAAO;IACrBC,aAAa,EAAC,CAAC,KAAK,EAAC,MAAM,EAAC,OAAO;EACnC,CAAC,EACD;IACAL,EAAE,EAAC,CAAC;IAACC,IAAI,EAAC,OAAO;IACjBC,SAAS,EAAE,CAAC;IACZC,QAAQ,EAAC,SAAS;IAClBC,aAAa,EAAC,KAAK;IACnBC,aAAa,EAAC,CAAC,KAAK;EACpB,CAAC,EACD;IACAL,EAAE,EAAC,CAAC;IAACC,IAAI,EAAC,UAAU;IACpBC,SAAS,EAAE,CAAC;IACZC,QAAQ,EAAC,MAAM;IACfC,aAAa,EAAC,MAAM;IACpBE,QAAQ,EAAC,CAAC,MAAM,EAAC,OAAO;EACxB,CAAC,EACD;IACAN,EAAE,EAAC,CAAC;IACJC,IAAI,EAAC,OAAO;IACZC,SAAS,EAAE,CAAC;IACZC,QAAQ,EAAC,SAAS;IAClBC,aAAa,EAAC,MAAM;IACpBE,QAAQ,EAAC,CAAC,MAAM;EAChB,CAAC,CACJ;EACDC,YAAY,EAAC,EAAE;EACfC,OAAO,EAAE;AACb,CAAC;AAED,MAAMC,aAAa,GAACZ,WAAW,CAAC;EAC5BI,IAAI,EAAE,UAAU;EAChBH,YAAY;EACZY,QAAQ,EAAE;IACNC,UAAU,EAACA,CAACC,KAAK,EAACC,MAAM,KAAG;MACvBD,KAAK,CAACb,QAAQ,CAACe,IAAI,CAAC;QAChBd,EAAE,EAACY,KAAK,CAACJ,OAAO;QAChBP,IAAI,EAACY,MAAM,CAACE,OAAO,CAACd,IAAI;QACxBC,SAAS,EAACW,MAAM,CAACE,OAAO,CAACb,SAAS;QAClCC,QAAQ,EAACU,MAAM,CAACE,OAAO,CAACZ;MAC5B,CAAC,CAAC;MACFS,KAAK,CAACJ,OAAO,IAAE,CAAC;IACpB,CAAC;IACDQ,WAAW,EAACA,CAACJ,KAAK,EAACC,MAAM,KAAG;MACxB,MAAMI,YAAY,GAACL,KAAK,CAACb,QAAQ,CAACmB,SAAS,CAAEC,OAAO,IAAGA,OAAO,CAACnB,EAAE,IAAEa,MAAM,CAACE,OAAO,CAACf,EAAE,CAAC;MACrFY,KAAK,CAACb,QAAQ,CAACkB,YAAY,CAAC,CAACb,aAAa,GAACS,MAAM,CAACE,OAAO,CAACK,KAAK;IACnE;EACJ;AACJ,CAAC,CAAC;AACF,OAAO,MAAM;EAACT,UAAU;EAACK;AAAW,CAAC,GAACP,aAAa,CAACY,OAAO;AAC3D,OAAO,MAAMC,gBAAgB,GAAEV,KAAK,IAAGA,KAAK,CAACb,QAAQ,CAACA,QAAQ;AAC9D;;AAEA,eAAeU,aAAa,CAACc,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}